Copy by Value vs Copy by Reference:

One of the main differences of composite data type versus primitive data type is that objects(or Arrays) are stored and copied “by reference”, whereas primitive variables are always copied “as a whole value”.

We will try to understand what happens when we copy a value of primitive and then an object,

let msg = "Hello World!";
let phrase = msg;

As a result we have two independent variables, each one storing the string "Hello World!"

This is the case with primitive data type variables. It is called Copy by Value.

But objects are not like that.

A variable assigned to an object stores not the object itself, but its “address in memory” – in other words “a reference” to it.

Let’s look at an example of such a variable:

let account = {
  name: "Vijay"
};

The object is stored somewhere in memory, while the account variable has only a “reference” to it.

We may think of an object variable, such as account, as like a sheet of paper with the address of the object on it.

When we perform actions with the object, e.g. take a property account.name, the JavaScript engine looks at what’s at that address and performs the operation on the actual object.

Now here’s why it’s important.

When an object variable is copied, the reference is copied, but the object itself is not duplicated. This is called Copy by Reference.